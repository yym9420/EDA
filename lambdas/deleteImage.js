"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const ddbDocClient = createDDbDocClient();
const handler = async (event) => {
    console.log("Event ", event);
    for (const record of event.Records) {
        const snsMessage = JSON.parse(record.Sns.Message);
        if (snsMessage.Records) {
            console.log("Message body ", JSON.stringify(snsMessage));
            for (const messageRecord of snsMessage.Records) {
                if (messageRecord.eventName.startsWith("ObjectRemoved:")) {
                    const s3e = messageRecord.s3;
                    const srcKey = decodeURIComponent(s3e.object.key.replace(/\+/g, " "));
                    console.log("Deleting image from DynamoDB");
                    await ddbDocClient.send(new lib_dynamodb_1.DeleteCommand({
                        TableName: process.env.TABLE_NAME,
                        Key: {
                            "ImageName": srcKey
                        }
                    }));
                }
            }
        }
    }
};
exports.handler = handler;
function createDDbDocClient() {
    const ddbClient = new client_dynamodb_1.DynamoDBClient({ region: process.env.REGION });
    const marshallOptions = {
        convertEmptyValues: true,
        removeUndefinedValues: true,
        convertClassInstanceToMap: true,
    };
    const unmarshallOptions = {
        wrapNumbers: false,
    };
    const translateConfig = { marshallOptions, unmarshallOptions };
    return lib_dynamodb_1.DynamoDBDocumentClient.from(ddbClient, translateConfig);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlSW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWxldGVJbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4REFBMEQ7QUFDMUQsd0RBQThFO0FBRTlFLE1BQU0sWUFBWSxHQUFHLGtCQUFrQixFQUFFLENBQUM7QUFFbkMsTUFBTSxPQUFPLEdBQWUsS0FBSyxFQUFFLEtBQVUsRUFBRSxFQUFFO0lBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdCLEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUNsQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEQsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN6RCxLQUFLLE1BQU0sYUFBYSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUU7Z0JBQzlDLElBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDdEQsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQztvQkFDN0IsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUE7b0JBQzNDLE1BQU0sWUFBWSxDQUFDLElBQUksQ0FDbkIsSUFBSSw0QkFBYSxDQUFDO3dCQUNsQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVO3dCQUNqQyxHQUFHLEVBQUU7NEJBQ0QsV0FBVyxFQUFFLE1BQU07eUJBQ3RCO3FCQUNBLENBQUMsQ0FDTCxDQUFBO2lCQUNOO2FBQ0Y7U0FDQTtLQUNGO0FBQ0gsQ0FBQyxDQUFBO0FBeEJZLFFBQUEsT0FBTyxXQXdCbkI7QUFFRCxTQUFTLGtCQUFrQjtJQUN2QixNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sZUFBZSxHQUFHO1FBQ3RCLGtCQUFrQixFQUFFLElBQUk7UUFDeEIscUJBQXFCLEVBQUUsSUFBSTtRQUMzQix5QkFBeUIsRUFBRSxJQUFJO0tBQ2hDLENBQUM7SUFDRixNQUFNLGlCQUFpQixHQUFHO1FBQ3hCLFdBQVcsRUFBRSxLQUFLO0tBQ25CLENBQUM7SUFDRixNQUFNLGVBQWUsR0FBRyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxDQUFDO0lBQy9ELE9BQU8scUNBQXNCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNqRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU05TSGFuZGxlciB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIERlbGV0ZUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvbGliLWR5bmFtb2RiXCI7XG5cbmNvbnN0IGRkYkRvY0NsaWVudCA9IGNyZWF0ZUREYkRvY0NsaWVudCgpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogU05TSGFuZGxlciA9IGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiRXZlbnQgXCIsIGV2ZW50KTtcbiAgZm9yIChjb25zdCByZWNvcmQgb2YgZXZlbnQuUmVjb3JkcykgeyAgICBcbiAgICBjb25zdCBzbnNNZXNzYWdlID0gSlNPTi5wYXJzZShyZWNvcmQuU25zLk1lc3NhZ2UpO1xuXG4gICAgaWYgKHNuc01lc3NhZ2UuUmVjb3Jkcykge1xuICAgICAgY29uc29sZS5sb2coXCJNZXNzYWdlIGJvZHkgXCIsIEpTT04uc3RyaW5naWZ5KHNuc01lc3NhZ2UpKTtcbiAgICAgIGZvciAoY29uc3QgbWVzc2FnZVJlY29yZCBvZiBzbnNNZXNzYWdlLlJlY29yZHMpIHsgICAgIFxuICAgICAgICBpZiAobWVzc2FnZVJlY29yZC5ldmVudE5hbWUuc3RhcnRzV2l0aChcIk9iamVjdFJlbW92ZWQ6XCIpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgczNlID0gbWVzc2FnZVJlY29yZC5zMzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzcmNLZXkgPSBkZWNvZGVVUklDb21wb25lbnQoczNlLm9iamVjdC5rZXkucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlbGV0aW5nIGltYWdlIGZyb20gRHluYW1vREJcIilcbiAgICAgICAgICAgIGF3YWl0IGRkYkRvY0NsaWVudC5zZW5kKFxuICAgICAgICAgICAgICAgIG5ldyBEZWxldGVDb21tYW5kKHtcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRBQkxFX05BTUUsXG4gICAgICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgICAgIFwiSW1hZ2VOYW1lXCI6IHNyY0tleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRERiRG9jQ2xpZW50KCkge1xuICAgIGNvbnN0IGRkYkNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogcHJvY2Vzcy5lbnYuUkVHSU9OIH0pO1xuICAgIGNvbnN0IG1hcnNoYWxsT3B0aW9ucyA9IHtcbiAgICAgIGNvbnZlcnRFbXB0eVZhbHVlczogdHJ1ZSxcbiAgICAgIHJlbW92ZVVuZGVmaW5lZFZhbHVlczogdHJ1ZSxcbiAgICAgIGNvbnZlcnRDbGFzc0luc3RhbmNlVG9NYXA6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCB1bm1hcnNoYWxsT3B0aW9ucyA9IHtcbiAgICAgIHdyYXBOdW1iZXJzOiBmYWxzZSxcbiAgICB9O1xuICAgIGNvbnN0IHRyYW5zbGF0ZUNvbmZpZyA9IHsgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9ucyB9O1xuICAgIHJldHVybiBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LmZyb20oZGRiQ2xpZW50LCB0cmFuc2xhdGVDb25maWcpO1xuICB9Il19